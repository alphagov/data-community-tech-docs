---
title: How the GOV.UK Knowledge Graph works
weight: 33
last_reviewed_on: 2022-02-02
---

# How the GOV.UK Knowledge Graph works

<%= warning_text('The GOV.UK Knowledge Graph is no longer in use. The project has evolved into GovSearch, which is based on the same principles, reuses the same pipeline. The documentation below is kept as a record.') %>


A [knowledge graph](https://www.turing.ac.uk/research/interest-groups/knowledge-graphs) is a collection of objects or nodes, linked together by relationships or links, representing statements or facts about a specific domain.

For example, in the statement “Passport #23431 is owned by John Smith”:

- “Passport #23431” and “John Smith” are subject and object nodes
- “is owned by” is a link between these nodes

The [GOV.UK Knowledge Graph](https://github.com/alphagov/govuk-knowledge-graph-gcp), also known as govGraph, is a knowledge graph that:

- combines structural GOV.UK information with user behaviour into a single data structure
- uses this data structure to build a knowledge graph with nodes that represent real-life concepts such as person name and address

The Knowledge Graph allows you to:

- explore graph databases and knowledge graphs for GOV.UK applications
- collaborate with other teams and communities to help them find content
- build products and applications that tell users about our content, such as the weighted PageRank algorithm
- improve colleagues’ data literacy so they can make better use of GOV.UK data
- provide early adopters with access and training to help increase use of our data applications and product

## Access the Knowledge Graph

The concept of the GOV.UK Knowledge Graph is represented in two different
databases: BigQuery, and Neo4j.  The main difference between them is that
BigQuery is a relational database that uses SQL, whereas Neo4j is a graph
database that uses the Cypher query language.  Almost exactly the same data is
available in both databases, and any query can be written in either language.
The same concepts of nodes and edges are represented in both databases.

### Neo4j

* Development lags behind BigQuery, because the main user-facing app, [GovSearch](/source/tools/govsearch/), runs off BigQuery, not Neo4j.
* Pricing is by the time that the instance is on, so it is only on between 7am and 7pm on weekdays.
* Full-text searches are slow.
* Only 100 concurrent sessions are supported.
* Access must be via the VPN, because the Neo4j browser doesn't support OAuth.
* Graph data structure
* Cypher query language

### BigQuery

* Development occurs here first, because the main user-facing app, which is GovSearch, runs off BigQuery.
* Pricing is for the amount of data scanned by queries.
* Full-text searches are quick.
* The number of concurrent sessions seems to be unlimited.
* Access is via Google login, which allows access to users in other departments.
* Relational data structure
* SQL

## Environments

There are three environments, which are each in their own GCP project.

* [Production](https://console.cloud.google.com/welcome?project=govuk-knowledge-graph)
* [Staging](https://console.cloud.google.com/welcome?project=govuk-knowledge-graph-staging)
* [Development](https://console.cloud.google.com/welcome?project=govuk-knowledge-graph-dev)

## Data sources

- [Content Store](https://github.com/alphagov/content-store) for most GOV.UK content.UK.
- [GOV.UK Publishing API](https://github.com/alphagov/publishing-api) for GOV.UK content relating to some roles and persons.
- Google Analytics for the number of page views and transitions between pages.
- [Bank Holidays API](https://www.api.gov.uk/gds/bank-holidays/#bank-holidays).
- [Entities](https://www.api.gov.uk/gds/bank-holidays/#bank-holidays).

### Content Store

We use the Content Store to build a structural network. In the structural network:

- the network nodes are GOV.UK content items, mostly corresponding to pages on GOV.UK
- the network edges are hyperlinks between those content items

In this context, a page is a GOV.UK content item, not a URL.

The Content Store is also used to create:

- node labels or node categories, like Brexit or Farming
- additional nodes like Taxon, Step-by-Step and Chapter nodes
- relationships between nodes and/or node types types to the graph, like "has_taxon", "has_organisation"

### Publishing API

The Publishing API enriches the network of content-item nodes by linking these nodes to content metadata such as publishing organisation, departmental organisation and people within these organisations.

### Google Analytics

We use Google Analytics data from the day before to build a functional network.

This network visualises user movement between specified content items (pages), which captures how users are navigating to and from these pages.

## Knowledge graph limitation

The Knowledge Graph does not fully represent the GOV.UK website because the graph uses the Content Store to create the content item network nodes.

This means that the Knowledge Graph includes the GOV.UK content, but not dynamic elements or elements rendered by the rendering app.

This also means that elements like `/browse` and `/topic` pages are not in the Knowledge Graph as source content ID or `Cid` nodes. A source `Cid` node is a node that has hyperlinks from it. You can however find these elements as target nodes. A target node is a node that has hyperlinks to it. This is because embedded links to these nodes are on content items.

## How the Knowledge Graph is created

The Knowledge Graph is created in a project in GCP (Google Cloud Platform). [Read how it is done](/analysis/govgraph/pipeline-v2/).
