---
title: Use Google Cloud Platform
weight: 40
last_reviewed_on: 2022-04-01
review_in: 6 months
---

# Use Google Cloud Platform (GCP)

GCP is a suite of cloud computing services.  GDS maintains a central account.

## Get access to GCP

You already have access to GCP via your GDS Google Account (the same as you use for Gmail).

You will need specific roles and permissions to use each of the services in GCP.  If you need some code to run unsupervised (without you personally logging into your Google account), then request a service account.

Roles, permissions and service accounts can be requested from the Data Engineering Community, via its slack channel #data-engineering.

## Google Groups

TBC.

## Service accounts

Service accounts are created for code that needs to run unsupervised.  It is unlikely that you will need a service account for personal use.

## Use GCP from the Cloud Console

Go to https://console.cloud.google.com/ in a browser.  Alternatively, use Cloud Shell by going to https://console.cloud.google.com/home/dashboard?cloudshell=true in a browser.

## Use GCP from the command line on your device

Use the [Google Cloud CLI](https://cloud.google.com/sdk/gcloud) to interact with GCP, and to run code that interacts with GCP.

[Install the Google Cloud CLI](https://cloud.google.com/sdk/docs/install-sdk#mac).

Follow the instructions about setting it up by running `gcloud init`.  It will open a browser for you to authorise gcloud to use your Google account.

Once it has been set up, you and your code will be authenticated for an hour.  Refresh your authentication by running `gcloud auth login`.

## Use GCP from code that runs on your device

Follow the instructions "Use GCP from the command line".  Then run `gcloud auth application-default login`.  It will open a browser for you to authorise gcloud to use your Google account.  It will also create a file in a location that it prints at the command line, resembling `~/.config/gcloud/application_default_credentials.json`.  Code that you run will use this file to authenticate itself on GCP.

### Check that you can use GCP from code that runs on your device.

Obtain the role BigQuery Job User for your account.

Install the [BigQuery API client library for Python](https://cloud.google.com/bigquery/docs/reference/libraries#client-libraries-install-python) with `pip install --upgrade google-cloud-bigquery`.  It is best to do this in a new [python virtual environment](https://gds-way.cloudapps.digital/manuals/programming-languages/python/python.html#environments).

Run `gcloud auth login --update-adc` at the command line.  The flag `--update-adc` allows code that you run to use your credentials.

Create a file called `bigquery.py` that contains the following code.

```python
from google.cloud import bigquery

# Construct a BigQuery client object.
client = bigquery.Client(project="govuk-bigquery-analytics")

query = """
    SELECT name, SUM(number) as total_people
    FROM `bigquery-public-data.usa_names.usa_1910_2013`
    WHERE state = 'TX'
    GROUP BY name, state
    ORDER BY total_people DESC
    LIMIT 20
"""

query_job = client.query(query)  # Make an API request.

print("The query data:")
for row in query_job:
    # Row values can be accessed by field name or index.
    print("name={}, count={}".format(row[0], row["total_people"]))
```

Run the code at the command line with `python bigquery.py`.  Expect to see the following result.

```text
The query data:
name=James, count=272793
name=John, count=235139
name=Michael, count=225320
name=Robert, count=220399
name=David, count=219028
name=Mary, count=209893
name=William, count=173092
name=Jose, count=157362
name=Christopher, count=144196
name=Maria, count=131056
name=Charles, count=126509
name=Daniel, count=117470
name=Richard, count=109888
name=Juan, count=109808
name=Jennifer, count=98696
name=Joshua, count=90679
name=Elizabeth, count=90465
name=Joseph, count=89097
name=Matthew, count=88464
name=Joe, count=87977
```

## Use GCP from code that runs on GCP itself

Request a [service account](https://cloud.google.com/iam/docs/service-accounts) from the slack channel #data-engineering, saying what roles and permissions it requires.  Ask for the service account to be attached to the resource in GCP that the code will run in.

## Impersonate a service account on your local device

Obtain a service account that grants your personal account the role "Service Account Token Creator", which includes the permission "iam.serviceAccounts.getAccessToken".  Note the email address of the service account.

Follow the instructions "Use GCP from the command line".  Then run `gcloud auth application-default login --impersonate-service-account=EMAIL_ADDRESS`, where `EMAIL_ADDRESS` is the one of the service account, ending in `.iam.gserviceaccount.com`.

The Google Cloud client libraries will now use the service account.

## Avoid using a credentials file

It is [best practice](https://cloud.google.com/blog/products/identity-security/how-to-authenticate-service-accounts-to-help-keep-applications-secure) not to use a credentials file, because they pose a security risk.  The Google Cloud client libraries will automatically find the credentials that it needs, whether you are running code on your local device or in GCP itself.
