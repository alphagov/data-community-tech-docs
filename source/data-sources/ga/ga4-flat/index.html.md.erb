---
title: GA4 flattened tables
weight: 3
last_reviewed_on: 2024-02-15
review_in: 6 months
---

# GA4 flattened tables
The GA4 flattened tables contain [GOV.UK GA4](/data-sources/ga/ga4/) data processed into a flat format.

These tables are created from the [raw data exported into BigQuery](/data-sources/ga/ga4-bq/) and contain most, but not all, of the same fields.
This flattened dataset is easier and more efficient to query, so should be used for most analysis and reporting.

## Access
Everyone with a @digital.cabinet-office.gov.uk email address (all GDS staff) has access to the data by default.

Access to GA4 data for users across government is currently limited to an early access group. For more details, see our blog on [Sharing data and lessons from our Google Analytics 4 upgrade](https://gds.blog.gov.uk/2023/03/27/sharing-data-and-lessons-from-our-google-analytics-4-upgrade/).

### Location
This data can be found in BigQuery in the `ga4-analytics-352613.flattened_dataset` dataset.
Each daily table is sharded in the format flattened_daily_ga_data_YYYYMMDD.

For more information on our Google Cloud Platform projects, see our [GCP project documentation](/gcp/).

## Production process
The code is exectuted via Dataform every morning at 8am UTC and it is stored in [the 'GA4 flattener' repository](https://github.com/alphagov/ga4-flattener).

## Schema
| field name | type | mode | description |
| --- | --- | --- | --- |
| event_date | STRING | NULLABLE | |
| user_pseudo_id | STRING | NULLABLE | |
| event_name | STRING | NULLABLE | The [name of the event](https://docs.publishing.service.gov.uk/analytics/attribute_event_name.html) |
| event_timestamp | INTEGER | NULLABLE | The time (in microseconds, UTC) when the event was logged |
| unique_session_id | STRING | NULLABLE | |
| page_title | STRING | NULLABLE | |
| page_location | STRING | NULLABLE | Full URL with the protocol, hostname, page path and query string |
| cleaned_page_location | STRING | NULLABLE | |
| ga_sessionid | INTEGER | NULLABLE | |
| ga_session_number | INTEGER | NULLABLE | |
| primary_publishing_organisation | STRING | NULLABLE | Identifies which organisation published the content in clear text e.g. "Home Office" |
| page_referrer | STRING | NULLABLE | The address of the webpage where a user clicked a link that sent them to the current page |
| cleaned_page_referrer | STRING | NULLABLE | |
| content_id | STRING | NULLABLE | Content attribute of `<meta name="govuk:content-id">` tag |
| browse_topic | STRING | NULLABLE | Content attribute of `<meta name="govuk:section">` tag |
| publishing_app | STRING | NULLABLE | Content attribute of `<meta name="govuk:publishing-application">` tag e.g. "collections-publisher" |
| public_updated_at | STRING | NULLABLE | |
| updated_at | STRING | NULLABLE | |
| first_published_at | STRING | NULLABLE | |
| taxonomy_all_ids_DEPRECATED | STRING | NULLABLE | |
| status_code | INTEGER | NULLABLE | Default will be 200 but interest here is on errors e.g. 404, 500 etc |
| withdrawn | STRING | NULLABLE | |
| document_type | STRING | NULLABLE | Content attribute of `<meta name="govuk:format">` tag |
| history | STRING | NULLABLE | |
| taxonomy_main_id | STRING | NULLABLE | Content attribute of `<meta name="govuk:taxon-id">` tag |
| taxonomy_all_DEPRECATED | STRING | NULLABLE | Content attribute of `<meta name="govuk:taxon-slugs">` tag |
| taxonomy_main | STRING | NULLABLE | Content attribute of `<meta name="govuk:taxon-slug">` tag |
| taxonomy_level_1 | STRING | NULLABLE | Content attribute of `<meta name="govuk:themes">` tag |
| full_taxonomy | STRING | NULLABLE | |
| full_taxonomy_ids | STRING | NULLABLE | |
| rendering_app | STRING | NULLABLE | Content attribute of `<meta name="govuk:rendering-app">` tag |
| organisations | STRING | NULLABLE | |
| session_engaged | STRING | NULLABLE | |
| schema_name | STRING | NULLABLE | Content attribute of `<meta name="govuk:schema-name">` tag |
| method | STRING | NULLABLE | |
| engagement_time_msec | INTEGER | NULLABLE | |
| event_campaign | STRING | NULLABLE | |
| content_language | STRING | NULLABLE | The language the content is authored in |
| type | STRING | NULLABLE | The type of feature the user interacted with e.g. tabs, accordion etc |
| event_source | STRING | NULLABLE | |
| session_source | STRING | NULLABLE | |
| link_text | STRING | NULLABLE | The text of a link |
| term | STRING | NULLABLE | |
| link_url | STRING | NULLABLE | The href attribute of a link |
| event_medium | STRING | NULLABLE | |
| session_medium | STRING | NULLABLE | |
| link_domain | STRING | NULLABLE | The destination domain of a link |
| event_previous_timestamp | INTEGER | NULLABLE | |
| event_bundle_sequence_id | INTEGER | NULLABLE | |
| event_server_timestamp_offset | INTEGER | NULLABLE | |
| user_id | STRING | NULLABLE | |
| user_first_touch_timestamp | INTEGER | NULLABLE | |
| category | STRING | NULLABLE | |
| mobile_brand_name | STRING | NULLABLE | |
| mobile_model_name | STRING | NULLABLE | |
| mobile_marketing_name | STRING | NULLABLE | |
| mobile_os_hardware_model | STRING | NULLABLE | |
| operating_system | STRING | NULLABLE | |
| operating_system_version | STRING | NULLABLE | |
| language | STRING | NULLABLE | |
| is_limited_ad_tracking | STRING | NULLABLE | |
| time_zone_offset_seconds | INTEGER | NULLABLE | |
| device_browser | STRING | NULLABLE | |
| device_browser_version | STRING | NULLABLE | |
| browser | STRING | NULLABLE | |
| browser_version | STRING | NULLABLE | |
| hostname | STRING | NULLABLE | |
| continent | STRING | NULLABLE | |
| country | STRING | NULLABLE | |
| region | STRING | NULLABLE | |
| city | STRING | NULLABLE | |
| sub_continent | STRING | NULLABLE | |
| metro | STRING | NULLABLE | |
| first_user_campaign | STRING | NULLABLE | |
| first_user_medium | STRING | NULLABLE | |
| first_user_source | STRING | NULLABLE | |
| stream_id | STRING | NULLABLE | |
| platform | STRING | NULLABLE | |
| event_dimensions_hostname | STRING | NULLABLE | |
| full_link_URL | STRING | NULLABLE | |
| search_sort | STRING | NULLABLE | Where available this is the sort method e.g. "Relevance" |
| search_term | STRING | NULLABLE | |
| search_results | STRING | NULLABLE | The number of results returned by the search |
| ui_text | STRING | NULLABLE | Identifying text for the specific item the user interacted with |
| section | STRING | NULLABLE | |
| action | STRING | NULLABLE | The action the user has taken e.g. “opened” |
| index | INTEGER | NULLABLE | |
| index_total | INTEGER | NULLABLE | |
| political_status | STRING | NULLABLE | Content attribute of `<meta name="govuk:political-status">` tag |
| publishing_government | STRING | NULLABLE | Content attribute of `<meta name="govuk:political-status">` tag e.g. "historic". This will only be available on 'whitehall' pages |
| world_locations | STRING | NULLABLE | Content attribute of `<meta name="govuk:analytics:world-locations">` tag |
| dclid | STRING | NULLABLE | |
| debug_mode | INTEGER | NULLABLE | |
| engaged_session_event | INTEGER | NULLABLE | |
| entrances | INTEGER | NULLABLE | |
| firebase_conversion | INTEGER | NULLABLE | |
| gclid | STRING | NULLABLE | |
| gclsrc | STRING | NULLABLE | |
| content | STRING | NULLABLE | |
| campaign_id | STRING | NULLABLE | |
| index_section | INTEGER | NULLABLE | |
| index_section_total | INTEGER | NULLABLE | |
| tool_name | INTEGER | NULLABLE | |
| response | STRING | NULLABLE | |
| ab_test | STRING | NULLABLE | Content attribute of `<meta name="govuk:ab-test">` tag |
| navigation_list_type | STRING | NULLABLE | Content attribute of `<meta name="govuk:navigation-list-type">` tag |
| navigation_page_type | STRING | NULLABLE | Content attribute of `<meta name="govuk:navigation-page-type">` tag |
| percent_scrolled | INTEGER | NULLABLE | The percentage scroll depth the user has reached |
| sfmc_activity_id | STRING | NULLABLE | |
| sfmc_activity_name | STRING | NULLABLE | |
| sfmc_asset_id | STRING | NULLABLE | |
| sfmc_channel | STRING | NULLABLE | |
| sfmc_journey_id | STRING | NULLABLE | |
| sfmc_journey_name | STRING | NULLABLE | |
| step_navs | STRING | NULLABLE | Content attribute of `<meta name="govuk:stepnavs">` tag |
| manual_campaign_id | STRING | NULLABLE | |
| manual_campaign_name | STRING | NULLABLE | |
| manual_source | STRING | NULLABLE | |
| manual_medium | STRING | NULLABLE | |
| manual_term | STRING | NULLABLE | |
| is_active_user | BOOLEAN | NULLABLE | |
| video_title | STRING | NULLABLE | |
| video_url | STRING | NULLABLE | |
| video_duration | INTEGER | NULLABLE | The length of the video (in seconds) |
| video_current_time | INTEGER | NULLABLE | The time through the video at the moment the event fired (in seconds) |
| video_percent | INTEGER | NULLABLE | Percentage through the video the user was at the moment the event fired |
| cookie_banner | STRING | NULLABLE | 'True' when the cookie banner is displayed to the user |
| devolved_nations_banner | STRING | NULLABLE | |
| intervention | STRING | NULLABLE | |
| phase_banner | STRING | NULLABLE | |
| outbound | STRING | NULLABLE | 'True' if link  leads away from the current domain |
| query_string | STRING | NULLABLE | The query string extracted from the page location |
| spelling_suggestion | STRING | NULLABLE | |
| outcome | STRING | NULLABLE | |
| viewport_size | STRING | NULLABLE | The size of the browser window, minus the scroll bars and toolbars |
| batch_page_id | INTEGER | NULLABLE | |
| batch_ordering_id | INTEGER | NULLABLE | |
| timestamp | INTEGER | NULLABLE | [Custom Unix timestamp](https://docs.publishing.service.gov.uk/analytics/attribute_timestamp.html) pushed with every dataLayer event |
| copy_length | INTEGER | NULLABLE | Number of characters in text copied ([copy events](https://docs.publishing.service.gov.uk/analytics/event_copy.html) only) |
| item_list_name | STRING | NULLABLE | |
| item_id | STRING | NULLABLE | |
| item_name | STRING | NULLABLE | |
| item_list_index | STRING | NULLABLE | |
| item_content_id | STRING | NULLABLE | |



## Retention



## Code for flattening GA4 raw data
```
WITH cte1 AS 
( 
  SELECT event_date AS event_date, 
  user_pseudo_id, 
  event_name, 
  event_timestamp, 
  CONCAT(user_pseudo_id, ( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id')) AS unique_session_id, 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_title') AS page_title, 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location') AS page_location, 
  SPLIT(REGEXP_REPLACE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 'https://www.gov.uk', ''),'?')[SAFE_OFFSET(0)] AS cleaned_page_location, 
  ( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') AS ga_sessionid, 
  ( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_number') AS ga_session_number, 
  LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'primary_publishing_organisation') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, 
  (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 
  (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS primary_publishing_organisation, 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_referrer') AS page_referrer, 
  SPLIT(REGEXP_REPLACE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_referrer'), 'https://www.gov.uk', ''),'?')[SAFE_OFFSET(0)] AS cleaned_page_referrer, 
  LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'content_id') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS content_id, 
  LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'browse_topic') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS browse_topic, 
  LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'publishing_app') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, 
  (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 
  ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS publishing_app,
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'public_updated_at') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, 
   (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), 
   (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS public_updated_at, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'updated_at') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS updated_at, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'first_published_at') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_published_at, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS taxonomy_all_ids_DEPRECATED, 
   LAST_VALUE(( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'status_code') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS status_code, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'withdrawn') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS withdrawn, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'document_type') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS document_type, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'history') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS history, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_main_id') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS taxonomy_main_id, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS taxonomy_all_DEPRECATED, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_main') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS taxonomy_main, 
   LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_level1') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS taxonomy_level_1,

    LAST_VALUE(
    (CASE WHEN (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_1') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_2') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_3') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_4') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_5') ELSE '' END ) )) = '' THEN NULL ELSE 
    (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_1') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_2') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_3') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_4') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_5') ELSE '' END ) )) 
    END) IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
    AS full_taxonomy, 

    LAST_VALUE(
    (CASE WHEN (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_1') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_2') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_3') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_4') ELSE '' END ), 
    (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_5') ELSE '' END ) )) = '' THEN NULL ELSE 
    (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_1') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_2') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_3') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_4') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'taxonomy_all_ids_5') ELSE '' END ) )) 
    END) IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
    AS full_taxonomy_ids, 

    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'rendering_app') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS rendering_app, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'organisations') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS organisations, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'session_engaged') AS session_engaged,
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'schema_name') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS schema_name, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'method') AS method, 
    ( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'engagement_time_msec') AS engagement_time_msec, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'campaign') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS campaign, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'content_language') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS content_language, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'type') AS type, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'source') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_source, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_text') AS link_text, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'term') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS term, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_url') AS link_url, 
    LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'medium') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_medium, 
     ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_domain') AS link_domain, 
     event_previous_timestamp, 
     event_bundle_sequence_id, 
     event_server_timestamp_offset, 
     user_id, 
     user_first_touch_timestamp, 
     device.category, 
     device.mobile_brand_name, 
     device.mobile_model_name, 
     device.mobile_marketing_name, 
     device.mobile_os_hardware_model, 
     device.operating_system, 
     device.operating_system_version, 
     device.language, 
     device.is_limited_ad_tracking, 
     device.time_zone_offset_seconds, 
     device.browser AS device_browser, 
     device.browser_version AS device_browser_version, 
     device.web_info.browser, 
     device.web_info.browser_version,
    device.web_info.hostname, 
    geo.continent, 
    geo.country, 
    geo.region, 
    geo.city, 
    geo.sub_continent, 
    geo.metro, 
    traffic_source.name AS first_user_campaign,
    traffic_source.medium AS first_user_medium, 
    traffic_source.source AS first_user_source, 
    stream_id, platform, 
    event_dimensions.hostname AS event_dimensions_hostname, 
    CASE WHEN (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_domain') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_domain') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_1') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_2') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_3') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_4') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_5') ELSE '' END ) )) = '' THEN NULL ELSE (CONCAT ( (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_domain') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_domain') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_1') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_1') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_2') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_2') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_3') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_3') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_4') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_4') ELSE '' END ), (CASE WHEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_5') != "" THEN ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'link_path_parts_5') ELSE '' END ) )) END AS full_link_URL, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'search_sort') AS search_sort, 
    ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'search_term') AS search_term, 
    ( SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'search_results') AS search_results ,
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ui_text') AS ui_text, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'section') AS section, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'action') AS action, 
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'index') AS index, 
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'index_total') AS index_total, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'political_status') AS political_status, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'publishing_government') AS publishing_government, 
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'world_locations') AS world_locations ,
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'dclid') AS dclid,
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'debug_mode') AS debug_mode,
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'engaged_session_event') AS engaged_session_event,
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'entrances') AS entrances,
    (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'firebase_conversion') AS firebase_conversion,
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'gclid') AS gclid,
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'gclsrc') AS gclsrc,
    (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ignore_referrer') AS ignore_referrer, 

  LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'content') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS content, 

      LAST_VALUE(( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'campaign_id') IGNORE NULLS) OVER (PARTITION BY user_pseudo_id, (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'page_location'), ( SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ga_session_id') ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS campaign_id,
      (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'index_section') AS index_section ,
(SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'index_section_total') AS index_section_total
,(SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'tool_name') AS tool_name
,(SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'response') AS response

,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'ab_test') AS ab_test
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'navigation_list_type') AS navigation_list_type
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'navigation_page_type') AS navigation_page_type
,(SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'percent_scrolled') AS percent_scrolled
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_activity_id') AS sfmc_activity_id
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_activity_name') AS sfmc_activity_name

,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_asset_id') AS sfmc_asset_id
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_channel') AS sfmc_channel
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_journey_id') AS sfmc_journey_id
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'sfmc_journey_name') AS sfmc_journey_name
,(SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'step_navs') AS step_navs


    
    FROM `project.dataset.events_*` 
    WHERE _table_suffix = '20230218'
    )
    
    , cte2 AS 
    ( SELECT 
      event_date AS event_date, 
      user_pseudo_id, 
      event_name, 
      event_timestamp, 
      CONCAT(user_pseudo_id, (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id')) AS unique_session_id, 
      (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_number') AS ga_session_number, 
      items.item_list_name 
      FROM `project.dataset.events_*`, UNNEST(items) AS items 
      WHERE _table_suffix = '20230218' )
      , cte3 AS 
      (
        SELECT event_date AS event_date, 
        user_pseudo_id, 
        event_name, 
        event_timestamp, 
        CONCAT(user_pseudo_id, (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id')) AS unique_session_id, 
        (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_number') AS ga_session_number, 
        items.item_id, 
        item_name, 
        items.item_list_index 
        FROM `project.dataset.events_*`, UNNEST(items) AS items 
        WHERE _table_suffix = '20230218' 
        AND event_name = 'select_item' ) 
        
        ,cte4 AS 
        ( 
          SELECT 
          a.* , 
          b.item_id, 
          b.item_name, 
          b.item_list_index 
          FROM cte2 A 
          LEFT JOIN cte3 B on a.event_date=b.event_date 
          AND a.user_pseudo_id=b.user_pseudo_id 
          AND a.event_name=b.event_name 
          AND a.event_timestamp=b.event_timestamp 
          AND a.unique_session_id=b.unique_session_id 
          AND a.ga_session_number=b.ga_session_number 
          GROUP BY a.event_date, A.user_pseudo_id, A.event_name, a.event_timestamp, a.unique_session_id, a.ga_session_number, a.item_list_name, b.item_id, b.item_name, b.item_list_index ) 
          ,final_cte AS 
          ( 
            SELECT a.*, 
            b.item_list_name, 
            b.item_id, 
            b.item_name, 
            b.item_list_index 
            FROM cte1 a 
            LEFT JOIN cte4 b 
            ON a.event_date=b.event_date 
            AND a.user_pseudo_id=b.user_pseudo_id 
            AND a.event_name=b.event_name 
            AND a.event_timestamp=b.event_timestamp 
            AND a.unique_session_id=b.unique_session_id 
            AND a.ga_session_number=b.ga_session_number) 
    
    SELECT DISTINCT * FROM final_cte
```