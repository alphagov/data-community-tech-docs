---
title: Feedback Pipeline tool regular expressions
weight: 41.5
last_reviewed_on: 2022-02-14
review_in: 6 months
---

# Feedback Pipeline tool regular expressions

The Feedback Pipeline tool uses 4 data cleansing methods:

- pruning
- masking
- filtering
- marking up

The tool identifies data to cleanse using known text patterns, otherwise known as regular expressions.

The following tables summarise the regular expressions the tool uses to identify data to cleanse.

## Pruning regular expressions

| Objective | Pipeline Metrics Alias | Expression | Description |
| --------------------------- | ---------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Remove URL strings | ‘\[remove\_url\]' | r'\\?.\*w' | Removes URL parameters (e.g. '?something=something') |
| Remove URL strings | ‘\[remove\_url\]' | r'http\\S+' | Removes contiguous block of text where the block begins with “http” |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | r'(?i)\[?requester\]?\\n?\[^\\n\]\*\[\\n\]{0,2}' | Removes newline content following a specified string (e.g. 'requester') where it can be assumed that the newline content contains non-relevant technical information |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | r'(?i)\[?referrer\]?\\n?\[^\\n\]\*\[\\n\]{0,2}' | Removes newline content following a specified string (e.g. 'requester') where it can be assumed that the newline content contains non-relevant technical information |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | r'(?i)(\[?user agent\]?\\n?\\&#124;user\_agent)\[^\\n\]\*\[\\n\]{0,2}' | Removes newline content following a specified string (e.g. 'requester') where it can be assumed that the newline content contains non-relevant technical information |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | r'(?i)(\[?javaScript enabled\]?\\n?\\&#124;javascript\_enabled)\[^\\n\]\*\[\\n\]{0,2}' | Removes newline content following a specified string (e.g. 'requester') where it can be assumed that the newline content contains non-relevant technical information |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | r'\\\[\*-\\\]' | Removes instances of text contained within square brackets where the text is non-alpha/or any number of “-“ |
| Remove Code Snippets | ‘\[remove\_code\_snippets\]' | \\\[^a-z-A-Z\\\]+' | Removes instances of text contained within square brackets where the text is non-alpha/or any number of “-“ |
| Remove redundant whitespace | ‘\[remove\_whitespace\]’ | r' \\s, ' | Replace contiguous blocks of whitespace with a single whitespace character |
| Remove redundant whitespace | ‘\[remove\_whitespace\]’ | r' \\S+$ | Remove instances of a single whitespace character at the end of a given text field |
| Remove redundant whitespace | ‘\[remove\_whitespace\]’ | r' ^\\S+ | Remove instances of a single whitespace character at the beginning of a given text field |
| Remove redundant whitespace | ‘\[other\_cleaning’\]' | r'what\_wrong' | Remove instances of “what\_wrong” from beginning of line |
| Remove redundant whitespace | ‘\[other\_cleaning’\]' | r'what\_doing' | Remove instance of “what\_doing” from beginning of line |
| Remove redundant whitespace | ‘\[other\_cleaning’\]' | r'^details' | Remove instance of “details” from beginning of line |
| Remove redundant whitespace | ‘\[other\_cleaning’\]' | r'^url' | Remove instance of “url” from beginning of line |

## Masking regular expressions

| Objective | Pipeline Metrics Alias | Expression | Description |
| ------------------- | ----------------------------- | -------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Remove PII | ‘\[remove\_pii\]' | Phone number | Replaces instances of text matching phone number pattern with \[PH###\] |
| Remove PII | ‘\[remove\_pii\]' | r'\\w{5}\\d{6}\\w{2}\\d\\w{2}', ‘\[DL###\]’ | Matches \[a-zA-Z0-9\_\] 5 times, any digit 6 times, \[a-zA-Z0-9\_\] 2 times, then a digit, then \[a-zA-Z0-9\_\] a final 2 times. Does not account for whitespaces.<br>Replaces matched instances with ‘\[DL###\]’ |
| Remove PII | ‘\[remove\_pii\]' | Passport number | Replaces instances of text matching passport number pattern with \['PN###'\] |
| Remove PII | ‘\[remove\_pii\]' | r'(?i)\\b(?:\[a-z\]\\W?){2}(?:\\d\\W?){6}\\W?\[a-z\]\\b' | Replaces instances of text matching national insurance number pattern with “\[NI###\]” |
| Remove PII | ‘\[remove\_pii\]' | r'(?i)nhs\\s?(?:.{0,20})?(?:\\d\\D?){9}(?:\\d)' | Replaces instances of text matching NHS number pattern with “\[NHS###\]” |
| Remove PII | ‘\[remove\_pii\]' | r'(?:\\d\\D?){16}' | Replaces instances of text matching credit card number pattern with “\[CC###\]” |

## Filtering, marking up and do nothing regular expressions

| Objective | Pipeline Metrics Alias | Expression | Description |
| ------------------- | ----------------------------- | -------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Remove Spam Entries | ‘vuln_scan_SQL_inject' | r'(?i)pg\_sleep' | Identifies strings which match the pattern ‘pg\_sleep’ in without case sensitivity |
| Remove Spam Entries | ‘vuln_scan_SQL_inject' | r'(?i)nessus\[\_0-9\]' | Matches records containing the string “nessus” where the the following character is either an underscore or a numeric. |
